steps:
  # 1) Build your Docker image with a unique tag
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - build
      - --no-cache
      - -t
      - "gcr.io/$PROJECT_ID/bot-of-culture:$BUILD_ID"
      - .

  # 2) Push it to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - push
      - "gcr.io/$PROJECT_ID/bot-of-culture:$BUILD_ID"

  # 3) Update the startup script with proper deployment logic
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Create a proper startup script with authentication
        cat > /tmp/startup-script.sh <<'SCRIPT_EOF'
        #!/bin/bash
        set -e

        echo "üöÄ Starting Bot-Of-Culture deployment..."

        # Get access token from metadata server and configure Docker
        echo "üîê Configuring Docker authentication..."
        ENDPOINT="metadata.google.internal/computeMetadata/v1"
        ACCOUNT="default"
        TOKEN=$$(curl --silent --header "Metadata-Flavor: Google" \
          http://$${ENDPOINT}/instance/service-accounts/$${ACCOUNT}/token)

        ACCESS=$$(echo $${TOKEN} | grep -oE "(ya29.[0-9a-zA-Z._-]*)")

        # Create a temporary directory for Docker config
        export DOCKER_CONFIG=/tmp/docker-config
        mkdir -p $$DOCKER_CONFIG

        printf $${ACCESS} | docker --config $$DOCKER_CONFIG login https://gcr.io -u oauth2accesstoken --password-stdin

        # Get the build ID from instance metadata
        BUILD_ID=$$(curl -H "Metadata-Flavor: Google" \
          http://metadata.google.internal/computeMetadata/v1/instance/attributes/bot-build-id 2>/dev/null || echo "latest")

        IMAGE="gcr.io/bot-of-culture/bot-of-culture:$${BUILD_ID}"

        # Clean up old Docker images to free space
        echo "üßπ Cleaning up old Docker images..."
        docker system prune -af || true

        echo "üì¶ Pulling image: $${IMAGE}"
        docker --config $$DOCKER_CONFIG pull "$${IMAGE}"

        # Stop and remove existing container if running
        echo "üõë Stopping existing container..."
        docker stop bot-of-culture 2>/dev/null || true
        docker rm bot-of-culture 2>/dev/null || true

        # Run the new container
        echo "‚ñ∂Ô∏è  Starting new container..."
        docker run -d \
          --name bot-of-culture \
          --restart unless-stopped \
          -e ENV=PROD \
          "$${IMAGE}"

        echo "‚úÖ Bot-Of-Culture deployment complete!"
        echo "üìã Container status:"
        docker ps | grep bot-of-culture || echo "Container not found!"
        SCRIPT_EOF

        # Store the BUILD_ID and startup script in VM metadata
        gcloud compute instances add-metadata bot-of-culture \
          --zone=us-central1-c \
          --metadata=bot-build-id=$BUILD_ID,startup-script="$(cat /tmp/startup-script.sh)"

        # Reset the VM to trigger startup script execution
        gcloud compute instances reset bot-of-culture --zone=us-central1-c

# Tell Cloud Build which images you expect to publish
images:
  - "gcr.io/$PROJECT_ID/bot-of-culture:$BUILD_ID"
